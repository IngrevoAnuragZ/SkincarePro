interface GoogleCalendarEvent {
  summary: string
  description: string
  start: {
    dateTime: string
    timeZone: string
  }
  end: {
    dateTime: string
    timeZone: string
  }
  recurrence: string[]
  reminders: {
    useDefault: boolean
    overrides: Array<{
      method: string
      minutes: number
    }>
  }
}

interface RoutineStep {
  id: string
  productName: string
  productType: string
  timing?: string
  description?: string
}

interface SkincareRoutine {
  id: string
  title: string
  time: 'morning' | 'afternoon' | 'evening'
  steps: RoutineStep[]
}

class GoogleCalendarService {
  private gapi: any = null
  private isSignedIn = false

  async initialize() {
    return new Promise((resolve, reject) => {
      if (typeof window === 'undefined') {
        reject(new Error('Google Calendar API can only be used in browser environment'))
        return
      }

      // Load Google API script
      if (!window.gapi) {
        const script = document.createElement('script')
        script.src = 'https://apis.google.com/js/api.js'
        script.onload = () => {
          window.gapi.load('client:auth2', () => {
            this.initializeGapi().then(resolve).catch(reject)
          })
        }
        script.onerror = () => reject(new Error('Failed to load Google API'))
        document.head.appendChild(script)
      } else {
        this.initializeGapi().then(resolve).catch(reject)
      }
    })
  }

  private async initializeGapi() {
    this.gapi = window.gapi

    await this.gapi.client.init({
      apiKey: import.meta.env.VITE_GOOGLE_API_KEY,
      clientId: import.meta.env.VITE_GOOGLE_CLIENT_ID,
      discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'],
      scope: 'https://www.googleapis.com/auth/calendar.events'
    })

    const authInstance = this.gapi.auth2.getAuthInstance()
    this.isSignedIn = authInstance.isSignedIn.get()
  }

  async signIn(): Promise<boolean> {
    try {
      if (!this.gapi) {
        await this.initialize()
      }

      const authInstance = this.gapi.auth2.getAuthInstance()
      
      if (!this.isSignedIn) {
        await authInstance.signIn()
        this.isSignedIn = true
      }

      return true
    } catch (error) {
      console.error('Google Calendar sign-in failed:', error)
      throw new Error('Failed to sign in to Google Calendar')
    }
  }

  async signOut() {
    if (this.gapi && this.isSignedIn) {
      const authInstance = this.gapi.auth2.getAuthInstance()
      await authInstance.signOut()
      this.isSignedIn = false
    }
  }

  private formatRoutineDescription(routine: SkincareRoutine): string {
    let description = `${routine.title}\n\n`
    description += `üåü Your personalized ${routine.time} skincare routine:\n\n`

    routine.steps.forEach((step, index) => {
      description += `${index + 1}. ${step.productName} (${step.productType})\n`
      if (step.timing) {
        description += `   ‚è±Ô∏è ${step.timing}\n`
      }
      if (step.description) {
        description += `   üí° ${step.description}\n`
      }
      description += '\n'
    })

    description += '\n‚ú® Generated by Ingrevo - Your AI Skincare Assistant\n'
    description += 'üì± Visit https://ingrevoskin.netlify.app for more personalized recommendations'

    return description
  }

  private createCalendarEvent(
    routine: SkincareRoutine,
    time: string,
    timezone: string,
    recurringPattern: string = 'daily'
  ): GoogleCalendarEvent {
    const now = new Date()
    const [hours, minutes] = time.split(':').map(Number)
    
    // Create start time for today
    const startDate = new Date(now)
    startDate.setHours(hours, minutes, 0, 0)
    
    // If the time has already passed today, start tomorrow
    if (startDate <= now) {
      startDate.setDate(startDate.getDate() + 1)
    }

    // End time is 30 minutes after start (estimated routine duration)
    const endDate = new Date(startDate)
    endDate.setMinutes(endDate.getMinutes() + 30)

    // Set up recurrence pattern
    let recurrence = ['RRULE:FREQ=DAILY']
    if (recurringPattern === 'weekdays') {
      recurrence = ['RRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR']
    } else if (recurringPattern === 'custom') {
      recurrence = ['RRULE:FREQ=DAILY;INTERVAL=1']
    }

    const timeIcons = {
      morning: 'üåÖ',
      afternoon: '‚òÄÔ∏è',
      evening: 'üåô'
    }

    return {
      summary: `${timeIcons[routine.time]} ${routine.title}`,
      description: this.formatRoutineDescription(routine),
      start: {
        dateTime: startDate.toISOString(),
        timeZone: timezone
      },
      end: {
        dateTime: endDate.toISOString(),
        timeZone: timezone
      },
      recurrence,
      reminders: {
        useDefault: false,
        overrides: [
          { method: 'popup', minutes: 10 },
          { method: 'email', minutes: 30 }
        ]
      }
    }
  }

  async addRoutinesToCalendar(
    routines: SkincareRoutine[],
    times: { [key: string]: string },
    timezone: string = Intl.DateTimeFormat().resolvedOptions().timeZone,
    recurringPattern: string = 'daily'
  ): Promise<string[]> {
    try {
      await this.signIn()

      const eventIds: string[] = []

      for (const routine of routines) {
        const time = times[routine.time]
        if (!time) continue

        const event = this.createCalendarEvent(routine, time, timezone, recurringPattern)

        const response = await this.gapi.client.calendar.events.insert({
          calendarId: 'primary',
          resource: event
        })

        if (response.result && response.result.id) {
          eventIds.push(response.result.id)
        }
      }

      return eventIds
    } catch (error) {
      console.error('Failed to add routines to calendar:', error)
      throw new Error('Failed to add routines to Google Calendar')
    }
  }

  async deleteEvent(eventId: string): Promise<void> {
    try {
      await this.signIn()
      
      await this.gapi.client.calendar.events.delete({
        calendarId: 'primary',
        eventId: eventId
      })
    } catch (error) {
      console.error('Failed to delete calendar event:', error)
      throw new Error('Failed to delete calendar event')
    }
  }

  getAuthStatus(): boolean {
    return this.isSignedIn
  }
}

export const googleCalendarService = new GoogleCalendarService()

// Utility function to get user's timezone
export const getUserTimezone = (): string => {
  return Intl.DateTimeFormat().resolvedOptions().timeZone
}

// Utility function to format time for display
export const formatTimeForDisplay = (time: string): string => {
  const [hours, minutes] = time.split(':').map(Number)
  const date = new Date()
  date.setHours(hours, minutes)
  
  return date.toLocaleTimeString([], { 
    hour: '2-digit', 
    minute: '2-digit',
    hour12: true 
  })
}